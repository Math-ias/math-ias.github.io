<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathias Kools</title>
    <link>http://math-ias.github.io/</link>
    <description>Recent content on Mathias Kools</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Sep 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://math-ias.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running the Mayflower Half Marathon</title>
      <link>http://math-ias.github.io/running/mayflower.html</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/running/mayflower.html</guid>
      <description>Running the Mayflower Half Marathon Training Miles by Week W0  W1  W2  W3  W4  W5  W6  W7  W8  W9  W10  W11  W12  W13  W14  W15   5  10  15  20  0    Day by day CSV data here. On October 2nd, 2022 I ran my first half marathon in 1 hour and 56 minutes.</description>
    </item>
    
    <item>
      <title>Running Every Street of Brookline</title>
      <link>http://math-ias.github.io/running/runningbrookline.html</link>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/running/runningbrookline.html</guid>
      <description>Running Every Street of Brookline On April 20th, 2023 I started a project to run every street of Brookline. I finished July 3rd, 2024.
 Pre-ramble (0) Packard&amp;rsquo;s Corner (1) North Brookline (2) Corey Hill (3) Trader Joe&amp;rsquo;s (4) Aspinwall Hill (5) Brookline village (6) Fisher Hill (7) High Street (8) Brookline Reservoir (9) Jamaica Pond (10) West Brookline (11) Walnut Hill (12) South Brookline (13) Holyhood Cemetary (14) Walnut Hills Cemetary Final Thoughts   Pre-ramble At the end of my first marathon I knew I wanted to go again.</description>
    </item>
    
    <item>
      <title>Running Trophy Case</title>
      <link>http://math-ias.github.io/running.html</link>
      <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/running.html</guid>
      <description>Running Trophy Case I&amp;rsquo;ve done a lot of running in the past 3 years. I wanted to save and share a trophy case of my best moments.
 Running every street of Brookline Mayflower ½MarathonNewport MarathonCharles River Marathon Newburyport ½MarathonFuture BAA ½Marathon HereBAA 10KBryan S Dina ½MarathonIpswich Ale ½Marathon  </description>
    </item>
    
    <item>
      <title>AOC Day 8 2021</title>
      <link>http://math-ias.github.io/aoc2021/8.html</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/8.html</guid>
      <description>Part One AND Part Two As always, read the problem text first.
In summary, this problem requires a process to unscramble segments and numbers. Each line of input contains two pieces of data &amp;hellip;
 The 7-segment display representation of all ten digits in a random order. Four of any of these digits. The number these digits build is a desired output. Part one asks for the count of specific numbers.</description>
    </item>
    
    <item>
      <title>Advent of Code 2021 in Spreadsheets</title>
      <link>http://math-ias.github.io/aoc2021.html</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021.html</guid>
      <description>Advent of Code 2021 in Spreadsheets Advent of Code is &amp;ldquo;an advent calendar of small programming puzzles&amp;rdquo;. Each puzzle comes with an example input and output. The site generates a unique challenge file0 for each user, and rewards them for solving it.
(0) These files dwarf the example input and output. This tests that solutions can scale. Programmers race on time to get onto a global leaderboard. I&amp;rsquo;m more interested in racing towards the bottom of technology stacks.</description>
    </item>
    
    <item>
      <title>AOC Day 2 2021</title>
      <link>http://math-ias.github.io/aoc2021/2.html</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/2.html</guid>
      <description>Part One As always, read the problem text first. In summary, the input is a list of movement commands. The format of the data is &amp;lt;direction&amp;gt; &amp;lt;amount&amp;gt; where direction can be forward, down, and up0.
(0) NOTE there is no backwards. There are sometimes unsaid invariants. &amp;lt;amount&amp;gt; is always a positive integer in my challenge input. Starting at (0,0) the objective is to figure out the final position.
 forward increases x.</description>
    </item>
    
    <item>
      <title>AOC Day 3 2021</title>
      <link>http://math-ias.github.io/aoc2021/3.html</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/3.html</guid>
      <description>Foreword There was a lot of repetitive work in this challenge. Easy enough in sheets but not easy on readers. Particularly on the number of bits &amp;hellip;
 The author&amp;rsquo;s examples use 5. The challenge input used 12. The written solution will demo 3.  Part One As always, read the problem text first. In summary, the input is a list of binary numbers (of the same length). The goal is to find, for each binary place, the most and least common values.</description>
    </item>
    
    <item>
      <title>AOC Day 1 2021</title>
      <link>http://math-ias.github.io/aoc2021/1.html</link>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/1.html</guid>
      <description>Part One Read part one from the advent of code website.0 The input is a line-separated list of numbers. The goal is to count how many numbers are greater than the previous one.
(0) This is the easiest way for me to navigate Advent of Code copyright. Solving Part One This challenge was easy with spreadsheets.1
(1) This was a confidence I came to regret.  DATA A2 A3 ...  INCREASE- B3 = blk{A3  A2}repeat → OUTPUT C3 = COUNTIF(red{B3:B},&#34;</description>
    </item>
    
    <item>
      <title>Clickr</title>
      <link>http://math-ias.github.io/clickr.html</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/clickr.html</guid>
      <description>Clickr Clickr is a minigame redstone contraption. A lectern faces the player showing a written book containing one hundred pages. The player&amp;rsquo;s goal is to flip through that book as fast as possible. After reaching the last page the player&amp;rsquo;s score is readable from the number of items in the hopper.
 Formulating the Game  Finding an Item   How It Works  Hoppers States Transitions The Book Itself   Bugs Extra Modifications and Extensions  Competition Simplification Book Art   Gameplay  Reception Tips and Tricks     Formulating the Game Finding an Item The original idea was to create a game about clicking as fast as possible0.</description>
    </item>
    
    <item>
      <title>AOC Day 4 2021</title>
      <link>http://math-ias.github.io/aoc2021/4.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/4.html</guid>
      <description>Part One AND Part Two This one is pretty funny. The author has managed to squeeze bingo into the story.
The input is both a list of numbers and boards. The goal is to figure out at which number call-out a board bingos. Part one asks for the board that bingos first. Part two asks for the one that bingos last.
Some notes &amp;hellip;
 In this version of bingo, bingo comes from completing only a row or column.</description>
    </item>
    
    <item>
      <title>AOC Day 5 2021</title>
      <link>http://math-ias.github.io/aoc2021/5.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/5.html</guid>
      <description>Part One and Two As always, read the problem text first. In summary, the input is a list of line segments made by two points. The goal is to count the number of points where at least two lines overlap.
The data uses some simplifications &amp;hellip;
 Each line is horizontal, vertical, or diagonal (slope of 1 or -1)0. Everything happens on integer coordinates. Every line fits within a known square box.</description>
    </item>
    
    <item>
      <title>AOC Day 6 2021</title>
      <link>http://math-ias.github.io/aoc2021/6.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/6.html</guid>
      <description>Part One AND Part Two As always, read the problem text first. In summary, the goal is to model the growth of splitting fish. At 0 days away from splitting one fish becomes two. One of the new fish is 6 days away from splitting and the second is 8 days away.
The output to part one is the total number of fish on day 80. Part two is the total number of fish on day 256.</description>
    </item>
    
    <item>
      <title>AOC Day 7 2021</title>
      <link>http://math-ias.github.io/aoc2021/7.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/7.html</guid>
      <description>Part One And Two As always, read the problem text first. In summary, part one and two are optimization problems.
In part one the goal is to find a number (X) that minimizes the sum of distances to elements in a set (A) ∑|A - X|. The goal of part two is to minimize the square distance0 ∑((A - X)^2 + |A - X|)/2.
(0) This exact formula comes from finite arithmetic series.</description>
    </item>
    
    <item>
      <title>AOC Day 9 2021</title>
      <link>http://math-ias.github.io/aoc2021/9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://math-ias.github.io/aoc2021/9.html</guid>
      <description>Part One As always, read the problem text first.
In summary, part one asks to identify “low cells” in a grid. A low cell has a value less than all cells next to it. The output takes all low cells, changes them by adding 1, and sums.
Solving Part One This solution requires multiple sheets.
Given a map of data0 &amp;hellip;
 A1=6A1=2A1=3 A1=7A1=4A1=5 A1=6A1=5A1=9 MAP  (0) Each digit gets a cell via Python.</description>
    </item>
    
  </channel>
</rss>